/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -a DBusShareAdaptorWrapper.hpp:DBusShareAdaptorWrapper.cpp -c DBusShareAdaptorWrapper C:\Users\cheiv\Documents\Projects\SailfishOS\fromBigTower\depecher\depecher\dbus\org.blacksailer.depecher.share.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "DBusShareAdaptorWrapper.hpp"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include "sailfish_access.c"
#include <QDebug>
/*
 * Implementation of adaptor class DBusShareAdaptorWrapper
 */

DBusShareAdaptorWrapper::DBusShareAdaptorWrapper(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DBusShareAdaptorWrapper::~DBusShareAdaptorWrapper()
{
    if (m_policyInitialized) {
        da_peer_flush(CONNMAN_BUS, NULL);
        if (active_policy) {
            g_ptr_array_free(active_policy, TRUE);
            active_policy = NULL;
        }
    }

}

void DBusShareAdaptorWrapper::initPolicy()
{
    active_policy = g_ptr_array_new_with_free_func
                    (sailfish_access_policy_free);

    sailfish_access_load_config();
    m_policyInitialized = true;


}


void DBusShareAdaptorWrapper::sendMedia(const QList<qlonglong> &chat_ids, const QString &filepath, const QString &mimeType, const QDBusMessage &message)
{
    if (sailfish_access_policy_check(message.service().toLatin1().constData(),
                                     SEND_MEDIA, 0) == AUTH_DENY) {
        QDBusConnection::sessionBus().send(message.createErrorReply(QDBusError::AccessDenied, "Policy error"));
        return;

    }
    // handle method call org.blacksailer.depecher.share.sendMedia
    QMetaObject::invokeMethod(parent(), "sendMedia",
                              Q_ARG(QList<qlonglong>, chat_ids),
                              Q_ARG(QString, filepath),
                              Q_ARG(QString, mimeType)
                             );
}


